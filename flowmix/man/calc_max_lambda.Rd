% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get-lambda-range.R
\name{calc_max_lambda}
\alias{calc_max_lambda}
\title{Estimate maximum lambda values by brute force.  First starts with a large
initial value \code{max_mean_lambda} and \code{max_prob_lambda}, and runs
the EM algorithm on decreasing set of values (sequentially halved). This
stops once you see any non-zero coefficients, and returns the *smallest*
regularization (lambda) value pair that gives full sparsity. Note that the
\code{zero_stabilize=TRUE} option is used in \code{flowmix()}, which
basically means the EM algorithm runs only until the zero pattern
stabilizes.}
\usage{
calc_max_lambda(
  ylist,
  countslist = NULL,
  X,
  numclust,
  max_mean_lambda = 4000,
  max_prob_lambda = 1000,
  verbose = FALSE,
  iimax = 16,
  ...
)
}
\arguments{
\item{ylist}{List of responses.}

\item{countslist}{Multiplicity for particles in \code{ylist}.}

\item{X}{Covariates.}

\item{numclust}{Number of clusters.}

\item{max_mean_lambda}{Defaults to 4000.}

\item{max_prob_lambda}{Defaults to 1000.}

\item{verbose}{TRUE for loudness.}

\item{iimax}{Maximum value of \eqn{x} for \eqn{2^{-x}} factors to try.}

\item{...}{Other arguments to \code{flowmix_once()}.}
}
\value{
list containing the two maximum values to use.
}
\description{
Estimate maximum lambda values by brute force.  First starts with a large
initial value \code{max_mean_lambda} and \code{max_prob_lambda}, and runs
the EM algorithm on decreasing set of values (sequentially halved). This
stops once you see any non-zero coefficients, and returns the *smallest*
regularization (lambda) value pair that gives full sparsity. Note that the
\code{zero_stabilize=TRUE} option is used in \code{flowmix()}, which
basically means the EM algorithm runs only until the zero pattern
stabilizes.
}
\examples{
\dontrun{
## Generate and bin data
obj = generate_data_generic(p=5, TT=50, fac=1, nt=7000, dimdat=3)
ylist = obj$ylist
X = obj$X
dat.gridsize = 50
dat.grid = make_grid(ylist, gridsize = dat.gridsize)
obj = bin_many_cytograms(ylist, dat.grid, mc.cores=4, verbose=TRUE)
ybin_list = obj$ybin_list
counts_list = obj$counts_list

numclust = 4
maxres = calc_max_lambda(ybin_list, counts_list, X, numclust, verbose=TRUE,
                            nrep = 4,
                            ## Function settings
                            parallelize = FALSE,
                            iimax = 20,
                            niter = 1000,
                            max_prob_lambda = 10000,
                            tol = 1E-3 ## This doesn't need to be so low here.
                            )

}
}
